###############
# ERROR CASES #
###############
for error_case_number in [1,2,3]:
    print('Beginning error case {:d}'.format(error_case_number))

    true_dict = {}
    inferred_dict = {}

    for type_i in types:

        # True rate densities are invariant of error case.
        r = df[(df['star_type']==type_i) & (df['has_planet'])]['r']
        N_p, edges = np.histogram(r, bins=radius_bins)

        true_dict[type_i] = {}
        true_dict[type_i]['N_p'] = N_p
        true_dict[type_i]['edges'] = edges

        # Inferred rate densities. Error case #3 gets incorrect, other two
        # are correct.
        if error_case_number == 1 or error_case_number == 2:
            r_a = df[(df['star_type']==type_i) & (df['has_det_planet'])]['r']
        elif error_case_number == 3:
            r_a = df[(df['star_type']==type_i) & (df['has_det_planet'])]['r_a']

        inferred_dict[type_i] = {}

        if error_case_number == 1 or error_case_number == 3:
            # How does the observer ideally account for Q_gi and Q_ci, the
            # geometric and completeness terms on a system-type specific
            # basis?

            df_detd = df[(df['star_type']==type_i) & (df['has_det_planet'])]

            weighted_N_p_det = []

            for j in range(len(radius_bins)-1):

                this_N_p_det = 0

                lower_edge = radius_bins[j]
                upper_edge = radius_bins[j+1]

                inds = (r_a > lower_edge) & (r_a <= upper_edge)

                if not np.any(inds):
                    # If there are no detected planets in this bin,
                    # detection efficiency is irrelevant for inferred rate.
                    this_weighted_N_p_det = 0

                else:
                    # This bin has detected planets. Each planet contibutes
                    # to "N_p_det" inversely weighted by the detection
                    # efficiency.
                    q = df_detd[inds]['q']

                    if type_i == 'single':
                        #Need this for above weighting to be fulfilled.
                        Q_g = Q_g0*np.ones(len(inds[inds]))
                        Q_c = 1
                    elif type_i == 'primary':
                        Q_g = Q_g1
                        Q_c = (1+q**α)**(-3)
                    elif type_i == 'secondary':
                        Q_g = Q_g0 * q**(2/3)
                        Q_c = (1+q**(-α))**(-3) * q**(-5)

                    Q = Q_g * Q_c

                    this_weighted_N_p_det = np.sum(1/Q)

                weighted_N_p_det.append(this_weighted_N_p_det)

            inferred_dict[type_i]['N_p'] = np.array(weighted_N_p_det)

        elif error_case_number == 2:

            N_p_det, edges = np.histogram( r_a, bins=radius_bins )
            Q = Q_g0
            inferred_dict[type_i]['N_p'] = N_p_det/Q

        inferred_dict[type_i]['edges'] = edges

    N_tot = N_0 + N_1 + N_2
    true_dict['Λ'] = (true_dict['single']['N_p'] + \
                     true_dict['primary']['N_p'] + \
                     true_dict['secondary']['N_p'])/N_tot
    true_dict['r'] = radius_bins

    if error_case_number == 2 or error_case_number == 3:
        N_tot_apparent = N_tot
    elif error_case_number == 1:
        N_tot_apparent = N_0 + N_1

    inferred_dict['Λ'] = \
                     (inferred_dict['single']['N_p'] + \
                     inferred_dict['primary']['N_p'] + \
                     inferred_dict['secondary']['N_p'])/N_tot_apparent
    inferred_dict['r'] = radius_bins

    outdf = pd.DataFrame(
            {'bin_left': edges[:-1],
             'true_Λ': true_dict['Λ'],
             'inferred_Λ': inferred_dict['Λ'],
             'true_single_Λ': true_dict['single']['N_p']/N_0,
             'true_primary_Λ': true_dict['primary']['N_p']/N_1,
             'true_secondary_Λ': true_dict['secondary']['N_p']/N_2
            }
            )

    savdir = '../data/numerics/'
    fname = 'results_model_{:d}_error_case_{:d}_Lambda2_{:.2f}'.format(
            model_number, error_case_number, Λ_2)
    if quickrun:
        fname = 'quickrun_' + fname
    outdf.to_csv(savdir+fname+'.out', index=False)
    print('\twrote output to {:s}'.format(savdir+fname+'.out'))


